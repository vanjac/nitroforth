arm7_entry:
	.msg	'>> ENTER ARM7'
	.brk

	mov	r10, 0x04000000 ; I/O start

	ldr	r1, =0x807F
	str	r1, [r10, 0x500] ; SOUNDCNT

	; beep sequence
	ldr	r1, =0xE3200020
	str	r1, [r10, 0x480] ; SOUND8CNT

	ldr	r1, =0xFFFFDAD0
	str	r1, [r10, 0x488] ; SOUND8TMR
	ldr	r0, =0x100000
	swi	0x30000 ; WaitByLoop
	ldr	r1, =0xFFFFE736
	str	r1, [r10, 0x488] ; SOUND8TMR
	ldr	r0, =0x100000
	swi	0x30000 ; WaitByLoop
	ldr	r1, =0xFFFFED68
	str	r1, [r10, 0x488] ; SOUND8TMR
	ldr	r0, =0x100000
	swi	0x30000 ; WaitByLoop

	; turn off sound
	mov	r1, 0
	str	r1, [r10, 0x480] ; SOUND8CNT

	mov	r0, 0x8000 ; enable FIFO
	str	r0, [r10, 0x184] ; IPCFIFOCNT

	mov	r1, 0x8 ; V-Blank IRQ
	strh	r1, [r10, 0x4]

	mov	r1, 0x1 ; enable V-Blank interrupt
	str	r1, [r10, 0x210] ; IE

	ldr	r6, =0x7F03FF ; prev keys ( KEYINPUT/EXTKEYIN )

arm7_halt_loop:
	swi	0x60000 ; halt

	; acknowledge interrupt
	ldr	r1, [r10, 0x214] ; IF
	str	r1, [r10, 0x214] ; IF

	; get key input
	ldr	r1, =0x04000130
	ldrh	r2, [r1]    ; KEYINPUT
	ldrh	r3, [r1, 6] ; EXTKEYIN
	orr	r2, r2, r3, LSL#16

	mov	r3, 17 ; button # (start with Y)
	mov	r0, 1  ; mask
@@button_test_loop:
	ands	r1, r0, r6, LSR r3
	beq	@@button_was_pressed
	ands	r1, r0, r2, LSR r3
	bne	@@button_test_continue ; is not pressed
	; button has been pressed
	orr	r1, r3, 0x10000000
	str	r1, [r10, 0x188] ; IPCFIFOSEND
	b	@@button_test_continue

@@button_was_pressed:
	ands	r1, r0, r2, LSR r3
	beq	@@button_test_continue ; is pressed
	; button has been released
	orr	r1, r3, 0x20000000
	str	r1, [r10, 0x188] ; IPCFIFOSEND
@@button_test_continue:
	subs	r3, r3, 1
	bge	@@button_test_loop

	; special input handling:

	tst	r6, 0xC        ; debug key WAS pressed
	tstne	r6, 0x400000   ; Pen WAS down
	mov	r6, r2         ; Update prev values
	beq	arm7_halt_loop ; wait until released

	tst	r6, 0xC ; debug key IS pressed
	beq	@@debug_key

	tst	r6, 0x400000 ; Pen IS down
	bne	arm7_halt_loop ; not pressed

	; Setup the SPI bus for TSC
	add	r0, r10, 0x1C0 ; SPICNT
	ldr	r1, =0x8A01 ; Select TSC @2MHz, enable chipselect
	strh	r1, [r0]

	; Send control byte to get X Position
	mov	r1, 0xD0 ; Mode 0, Differential, 12-bit, Channel 5
	strb	r1, [r0, 2] ; SPIDATA
	bl	f_read_tsc_12bit
	mov	r4, r1

	; Send control byte to get Y Position
	mov	r1, 0x90 ; Mode 0, Differential, 12-bit, Channel 1
	strb	r1, [r0, 2] ; SPIDATA
	bl	f_read_tsc_12bit
	orr	r4, r1, r4, LSL#16

	; TODO: filter out noise! see GBATEK "Touchscreen Notes"

	; Disable Chipselect Hold
	ldr	r1, =0x8201
	strh	r1, [r0]
	; Send final value
	mov	r1, 0
	strb	r1, [r0, 2]
	; Disable SPI bus
	mov	r1, 0
	strh	r1, [r0]

	ldr	r1, [r10, 0x184] ; IPCFIFOCNT
	tst	r1, 0x2 ; FIFO full
	bne	@@error_beep
	; Send IPC
	str	r4, [r10, 0x188] ; IPCFIFOSEND

	b	arm7_halt_loop

@@error_beep:
	ldr	r1, =0xE3200020
	str	r1, [r10, 0x480] ; SOUND8CNT
	ldr	r1, =0xFFFFED68
	str	r1, [r10, 0x488] ; SOUND8TMR
	ldr	r0, =0x100000
	swi	0x30000 ; WaitByLoop
	mov	r1, 0
	str	r1, [r10, 0x480] ; SOUND8CNT
	ldr	r0, =0x100000
	swi	0x30000 ; WaitByLoop

	b	arm7_halt_loop

@@debug_key:
	ldr	r1, =0x8008      ; flush FIFO
	str	r1, [r10, 0x184] ; IPCFIFOCNT
	mov	r1, 0x2000       ; send IRQ
	str	r1, [r10, 0x180] ; IPCSYNC
	mov	r1, 0
	str	r1, [r10, 0x180] ; IPCSYNC

	b	arm7_halt_loop

; r0: SPICNT address
f_spi_busy_wait:
	ldrh	r1, [r0]
	tst	r1, 0x80
	bne	f_spi_busy_wait
	bx	lr

; r0: SPICNT address
; ---
; r1: value
f_read_tsc_12bit:
	push	r4-r6,lr
	mov	r6, 0 ; zero

	bl	f_spi_busy_wait
	; Receive byte 1
	strb	r6, [r0, 2]
	bl	f_spi_busy_wait
	ldrb	r4, [r0, 2]
	; Receive byte 2
	strb	r6, [r0, 2]
	bl	f_spi_busy_wait
	ldrb	r5, [r0, 2]

	mov	r1, r4, LSL#5
	orr	r1, r5, LSR#3

	pop	r4-r6,lr
	bx	lr

.pool
