word_length_mask = 0x1F
word_length_bits = 5
word_hidden_flag = 0x20
word_immediate_flag = 0x80

docol = 0xE92D4000 ; 'push lr' instruction

; dsForth is subroutine-threaded

; r0:	Scratch
; r1:	Scratch
; r2:	Scratch
; r3:	Scratch
; r4:	Callee save
; r5:	Callee save
; r6:	Callee save
; r7:	Callee save
; r8:	Data Stack Pointer
; r9:	Top Data Stack Value
; r10:	Constant 0x04000000
; r11:	?
; r12:	Scratch(?)
; r13:	Return Stack Pointer
; r14:	Link Register
; r15:	Program Counter

scratch_area:
	defs	512

var_scratch_start:
	dd	scratch_area
var_data_stack_top:
	dd	(dtcm_loc + 0x2000)
var_return_stack_top:
	dd	0

start_forth:
	str	sp, [var_return_stack_top] ; Store the return stack top
	bl	f_init_forth_env
	bl	INTERPRET ; read boot code
	b	QUIT

f_init_forth_env:
	ldr	r8, [var_data_stack_top]   ; Set data stack
	ldr	r9, =0xDEADBEEF
	mov	r10, 0x04000000
	add	r0, =@@bad_return
	push	r0
	bx	lr
@@bad_return:
	bl	f_print_string_inline
		db	10,'!! Bad Return !!',0
		.align	4
	b	QUIT ; abort

; Dictionary:

; ( a -- )
name_DROP:
	dd	0 ; link
	db	4,'drop' ; name
	.align	4
DROP:
	ldmfd	[r8]!, r9
	bx	lr

; ( a b -- b a )
name_SWAP:
	dd	name_DROP ; link
	db	4,'swap' ; name
	.align	4
SWAP:
	swp	r9, r9, [r8]
	bx	lr

; ( a -- a a )
name_DUP:
	dd	name_SWAP ; link
	db	3,'dup' ; name
	.align	4
DUP:
	stmfd	[r8]!, r9
	bx	lr

; ( a b -- a b a )
name_OVER:
	dd	name_DUP ; link
	db	4,'over' ; name
	.align	4
OVER:
	stmfd	[r8]!, r9
	ldr	r9, [r8, 4]
	bx	lr

; ( a b -- b )
name_NIP:
	dd	name_OVER ; link
	db	3,'nip' ; name
	.align	4
NIP:
	add	r8, r8, 4
	bx	lr

; ( a b -- a+b )
name_plus:
	dd	name_NIP ; link
	db	1,'+' ; name
	.align	4
plus:
	ldmfd	[r8]!, r0
	add	r9, r0, r9
	bx	lr

; ( a b -- a-b )
name_minus:
	dd	name_plus ; link
	db	1,'-' ; name
	.align	4
minus:
	ldmfd	[r8]!, r0
	sub	r9, r0, r9
	bx	lr

; ( a b -- a*b )
name_times:
	dd	name_minus ; link
	db	1,'*' ; name
	.align	4
times:
	ldmfd	[r8]!, r0
	mul	r9, r0, r9
	bx	lr

; ( a b -- a/b )
name_divMOD:
	dd	name_times ; link
	db	4,'/mod' ; name
	.align	4
divMOD:
	push	lr
	ldr	r0, [r8]
	mov	r1, r9
	bl	f_arm9_divmod_32
	mov	r9, r0
	str	r1, [r8]
	pop	lr
	bx	lr

; ( a -- -a )
name_NEGATE:
	dd	name_divMOD ; link
	db	6,'negate' ; name
	.align	4
NEGATE:
	rsb	r9, r9, 0
	bx	lr

; ( a b -- a&b )
name_AND:
	dd	name_NEGATE ; link
	db	3,'and' ; name
	.align	4
AND:
	ldmfd	[r8]!, r0
	and	r9, r0, r9
	bx	lr

; ( a b -- a|b )
name_OR:
	dd	name_AND ; link
	db	2,'or' ; name
	.align	4
OR:
	ldmfd	[r8]!, r0
	orr	r9, r0, r9
	bx	lr

; ( a b -- a^b )
name_XOR:
	dd	name_OR ; link
	db	3,'xor' ; name
	.align	4
XOR:
	ldmfd	[r8]!, r0
	eor	r9, r0, r9
	bx	lr

; ( a -- ~a )
name_INVERT:
	dd	name_XOR ; link
	db	6,'invert' ; name
	.align	4
INVERT:
	mvn	r9, r9
	bx	lr

; ( a b -- a>>b )
name_LSHIFT:
	dd	name_INVERT ; link
	db	6,'lshift' ; name
	.align	4
LSHIFT:
	ldmfd	[r8]!, r0
	mov	r9, r0, LSL r9
	bx	lr

; ( a b -- a>>b )
name_RSHIFT:
	dd	name_LSHIFT ; link
	db	6,'rshift' ; name
	.align	4
RSHIFT:
	ldmfd	[r8]!, r0
	mov	r9, r0, LSR r9
	bx	lr

; ( a b -- a=b )
name_eq:
	dd	name_RSHIFT ; link
	db	1,'=' ; name
	.align	4
eq:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvneq	r9, 0 ; true
	movne	r9, 0 ; false
	bx	lr

; ( a b -- a<>b )
name_ne:
	dd	name_eq ; link
	db	2,'<>' ; name
	.align	4
ne:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvnne	r9, 0 ; true
	moveq	r9, 0 ; false
	bx	lr

; ( a b -- a<b )
name_lt:
	dd	name_ne ; link
	db	1,'<' ; name
	.align	4
lt:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvnlt	r9, 0 ; true
	movge	r9, 0 ; false
	bx	lr

; ( a b -- a<b )
name_gt:
	dd	name_lt ; link
	db	1,'>' ; name
	.align	4
gt:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvngt	r9, 0 ; true
	movle	r9, 0 ; false
	bx	lr

; ( a b -- a<=b )
name_le:
	dd	name_gt ; link
	db	2,'<=' ; name
	.align	4
le:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvnle	r9, 0 ; true
	movgt	r9, 0 ; false
	bx	lr

; ( a b -- a>=b )
name_ge:
	dd	name_le ; link
	db	2,'>=' ; name
	.align	4
ge:
	ldmfd	[r8]!, r0
	cmp	r0, r9
	mvnge	r9, 0 ; true
	movlt	r9, 0 ; false
	bx	lr

; ( a -- a=0 )
name_zeroeq:
	dd	name_ge ; link
	db	2,'0=' ; name
	.align	4
zeroeq:
	cmp	r9, 0
	mvneq	r9, 0 ; true
	movne	r9, 0 ; false
	bx	lr

; ( -- )
name_EXIT:
	dd	name_zeroeq ; link
	db	4,'exit' ; name
	.align	4
EXIT:
	pop	lr
	bx	lr

; ( -- value )
name_LIT:
	dd	name_EXIT ; link
	db	3,'lit' ; name
	.align	4
LIT:
	stmfd	[r8]!, r9
	ldmia	[lr]!, r9
	bx	lr

; ( data addr -- )
name_store:
	dd	name_LIT ; link
	db	1,'!' ; name
	.align	4
store:
	ldmfd	[r8]!, r0 ; data to store
	str	r0, [r9]
	ldmfd	[r8]!, r9
	bx	lr

; ( addr -- data )
name_fetch:
	dd	name_store ; link
	db	1,'@' ; name
	.align	4
fetch:
	ldr	r9, [r9]
	bx	lr

; ( data addr -- )
name_Hstore:
	dd	name_fetch ; link
	db	2,'h!' ; name
	.align	4
Hstore:
	ldmfd	[r8]!, r0 ; data to store
	strh	r0, [r9]
	ldmfd	[r8]!, r9
	bx	lr

; ( addr -- data )
name_Hfetch:
	dd	name_Hstore ; link
	db	2,'h@' ; name
	.align	4
Hfetch:
	ldrh	r9, [r9]
	bx	lr

; ( data addr -- )
name_Cstore:
	dd	name_Hfetch ; link
	db	2,'c!' ; name
	.align	4
Cstore:
	ldmfd	[r8]!, r0 ; data to store
	strb	r0, [r9]
	ldmfd	[r8]!, r9
	bx	lr

; ( addr -- data )
name_Cfetch:
	dd	name_Cstore ; link
	db	2,'c@' ; name
	.align	4
Cfetch:
	ldrb	r9, [r9]
	bx	lr

name_HERE:
	dd	name_Cfetch ; link
	db	4,'here' ; name
	.align	4
HERE:
	stmfd	[r8]!, r9
	ldr	r9, [var_hereref]
	bx	lr
var_hereref:
	dd	var_scratch
var_data:
	dd	arm9_end
var_scratch:
	dd	scratch_area

name_LATEST:
	dd	name_HERE ; link
	db	6,'latest' ; name
	.align	4
LATEST:
	stmfd	[r8]!, r9
	add	r9, =var_LATEST
	bx	lr
var_LATEST:
	dd	latest_word

name_S0:
	dd	name_LATEST ; link
	db	2,'s0' ; name
	.align	4
S0:
	stmfd	[r8]!, r9
	add	r9, =var_data_stack_top
	bx	lr

name_DSPfetch:
	dd	name_S0 ; link
	db	4,'dsp@' ; name
	.align	4
DSPfetch:
	str	r9, [r8, -4]
	mov	r9, r8
	sub	r8, r8, 4
	bx	lr

name_RSPfetch:
	dd	name_DSPfetch ; link
	db	4,'rsp@' ; name
	.align	4
RSPfetch:
	stmfd	[r8]!, r9
	mov	r9, sp
	bx	lr

name_Rpush:
	dd	name_RSPfetch ; link
	db	2,'>r' ; name
	.align	4
Rpush:
	push	r9
	ldmfd	[r8]!, r9
	bx	lr

name_Rpop:
	dd	name_Rpush ; link
	db	2,'r>' ; name
	.align	4
Rpop:
	stmfd	[r8]!, r9
	pop	r9
	bx	lr

name_Rfetch:
	dd	name_Rpop ; link
	db	2,'r@' ; name
	.align	4
Rfetch:
	stmfd	[r8]!, r9
	ldr	r9, [sp]
	bx	lr

name_RDROP:
	dd	name_Rfetch ; link
	db	5,'rdrop' ; name
	.align	4
RDROP:
	add	sp, sp, 4
	bx	lr

name_CURKEY:
	dd	name_RDROP ; link
	db	6,'curkey' ; name
	.align	4
CURKEY:
	stmfd	[r8]!, r9
	add	r9, =var_curkey
	bx	lr
var_curkey:
	dd	input_buffer

name_BUFTOP:
	dd	name_CURKEY ; link
	db	6,'buftop' ; name
	.align	4
BUFTOP:
	stmfd	[r8]!, r9
	add	r9, =var_buftop
	bx	lr
var_buftop:
	dd	init_end

; ( -- char )
name_KEY:
	dd	name_BUFTOP ; link
	db	3,'key' ; name
	.align	4
KEY:
	push	lr
	bl	f_key
	stmfd	[r8]!, r9
	mov	r9, r0
	pop	lr
	bx	lr

f_key:
	push	r4-r6,lr
	ldr	r5, [var_curkey]
	ldr	r1, [var_buftop]
	cmp	r5, r1
	bhs	@@get_more_input

@@get_buffered_input:
	ldrb	r0, [r5]
	add	r5, r5, 1
	str	r5, [var_curkey]

	pop	r4-r6,lr
	bx	lr

@@get_more_input:
	ldr	r5, =input_buffer ; curkey
	mov	r6, r5 ; buftop
@@lineread_loop:
	bl	f_await_keypress
	cmp	r0, 8 ; backspace
	beq	@@backspace
	cmp	r0, 27 ; escape
	beq	@@escape
	; add character
	strb	r0, [r6]
	add	r6, r6, 1
@@print_char:
	mov	r4, r0
	orr	r0, r0, 0x1000 ; palette 1
	bl	f_print_char
	cmp	r4, 10 ; newline
	bne	@@lineread_loop

	str	r6, [var_buftop]
	b	@@get_buffered_input

@@backspace:
	cmp	r6, r5
	bls	@@lineread_loop ; can't backspace
	sub	r6, r6, 1
	b	@@print_char

@@escape:
	bl	f_print_string_inline
		db	10,' Esc',10,0
		.align	4
	mov	r6, r5
	b	@@lineread_loop

; ( char -- )
name_EMIT:
	dd	name_KEY ; link
	db	4,'emit' ; name
	.align	4
EMIT:
	push	lr
	mov	r0, r9
	bl	f_print_char
	ldmfd	[r8]!, r9
	pop	lr
	bx	lr

; ( -- addr len )
name_WORD:
	dd	name_EMIT ; link
	db	4,'word' ; name
	.align	4
WORD:
	push	r4,lr

@@find_non_blank:
	bl	f_key
	cmp	r0, ' ' ; all control characters and space
	bls	@@find_non_blank ; keep searching

	add	r4, =@@word_buf
@@append_loop:
	strb	r0, [r4]
	add	r4, r4, 1
	bl	f_key
	cmp	r0, ' '
	bhi	@@append_loop ; keep appending

	add	r0, =@@word_buf
	stmfd	[r8]!, r0,r9
	sub	r9, r4, r0 ; word length

	pop	r4,lr
	bx	lr

@@word_buf:
	defs	32

; ( -- available? )
name_WORDquestion:
	dd	name_WORD ; link
	db	5,'word?' ; name
	.align	4
WORDquestion:
	stmfd	[r8]!, r9
	ldr	r0, [var_curkey]
	ldr	r1, [var_buftop]
@@loop:
	cmp	r0, r1
	bhs	@@no_word
	ldrb	r2, [r0]
	add	r0, r0, 1
	cmp	r2, ' '
	bls	@@loop ; whitespace

	; found word
	sub	r0, r0, 2
	mvn	r9, 0
	b	@@end

@@no_word:
	mov	r9, 0
@@end:
	str	r0, [var_curkey]
	bx	lr

; print a string
; ( addr len -- )
name_TYPE:
	dd	name_WORDquestion ; link
	db	4,'type' ; name
	.align	4
TYPE:
	push	r4,lr
	ldmfd	[r8]!, r4 ; string ptr
	add	r9, r4, r9 ; string end
@@loop:
	ldrb	r0, [r4]
	bl	f_print_char
	add	r4, r4, 1
	cmp	r4, r9
	blt	@@loop

	ldmfd	[r8]!, r9
	pop	r4,lr
	bx	lr

; print a null-terminated string
; ( addr -- null-addr )
name_ZTYPE:
	dd	name_TYPE ; link
	db	5,'ztype' ; name
	.align	4
ZTYPE:
	push	lr
	mov	r0, r9
	bl	f_print_string_null
	mov	r9, r0
	pop	lr
	bx	lr

; ( addr len -- value unparsed )
name_NUMBER:
	dd	name_ZTYPE ; link
	db	6,'number' ; name
	.align	4
NUMBER:
	push	r4
	; TODO: support fixed point fractions (16.16)

	ldmfd	[r8]!, r0 ; char ptr (don't move stack)
	mov	r1, 10   ; base
	mov	r2, 0    ; value

	cmp	r9, 0 ; chars remaining
	beq	@@done

	ldrb	r4, [r0] ; negative sign or hex prefix? (can't use both)
	cmp	r4, '$'
	moveq	r1, 16
	cmpne	r4, '-'
	addeq	r0, r0, 1 ; either - or $ -- move ahead 1 char
	subeqs	r9, r9, 1
	beq	@@done

@@parse_loop:
	ldrb	r3, [r0] ; char
	sub	r3, r3, '0'
	cmp	r3, 9
	bls	@@not_letter
	; TODO: support lowercase letters
	cmp	r3, ('A' - '0')
	blo	@@done ; not valid (between '9' and 'A')
	subs	r3, r3, ('A' - '9' - 1)
@@not_letter:
	cmp	r3, r1
	bhs	@@done   ; digit out of range
	mla	r2, r2, r1, r3

	add	r0, r0, 1
	subs	r9, r9, 1
	bne	@@parse_loop

@@done:
	cmp	r4, '-'
	rsbeq	r2, r2, 0 ; negate

	stmfd	[r8]!, r2
	pop	r4
	bx	lr

; ( addr len -- header )
name_FIND:
	dd	name_NUMBER ; link
	db	4,'find' ; name
	.align	4
FIND:
	push	r4
	ldmfd	[r8]!, r0 ; string ptr
	mov	r1, r9    ; string len
	ldr	r9, [var_LATEST] ; header ptr

@@search_loop:
	cmp	r9, 0
	beq	@@done

	ldrb	r2, [r9, 4] ; word len
	mov	r2, r2, LSL#(32 - word_length_bits - 1) ; include hidden flag
	mov	r2, r2, LSR#(32 - word_length_bits - 1)
	cmp	r2, r1
	bne	@@search_next ; length not equal, or hidden flag set

	; strcmp (TODO: optimize!)
	sub	r2, r2, 1
@@strcmp_loop:
	ldrb	r3, [r0, r2]
	add	r4, r2, 5 ; word name offset
	ldrb	r4, [r9, r4]
	cmp	r3, r4
	bne	@@search_next
	subs	r2, r2, 1
	bge	@@strcmp_loop

	; matching!
@@done:
	pop	r4
	bx	lr

@@search_next:
	ldr	r9, [r9]
	b	@@search_loop

; ( header -- code )
name_toCFA:
	dd	name_FIND ; link
	db	4,'>cfa' ; name
	.align	4
toCFA:
	cmp	r9, 0
	beq	@@fail
	add	r9, r9, 4
	ldrb	r0, [r9] ; word length / flags
	mov	r0, r0, LSL#(32 - word_length_bits)
	mov	r0, r0, LSR#(32 - word_length_bits)
	add	r9, r9, r0  ; skip name
	add	r9, r9, 4   ; skip length, padding
	bic	r9, r9, 0x3 ; align
	bx	lr
@@fail:
	bl	f_print_string_inline
		db	'No word!',0
		.align	4
	b	QUIT ; abort

; ( addr len -- )
name_CREATE:
	dd	name_toCFA ; link
	db	6,'create' ; name
	.align	4
CREATE:
	push	r4-r5
	mov	r0, r9 ; length
	ldmfd	[r8]!, r1,r9 ; str

	ldr	r5, [var_hereref]
	ldr	r2, [r5] ; here
	ldr	r3, [var_LATEST]
	str	r2, [var_LATEST] ; update latest

	str	r3, [r2] ; link pointer
	strb	r0, [r2, 4] ; length
	add	r2, 5
	mov	r4, 0
@@copy_word:
	ldrb	r3, [r1, r4]
	strb	r3, [r2, r4]
	add	r4, r4, 1
	subs	r0, r0, 1
	bgt	@@copy_word

	add	r2, r2, r4
	add	r2, r2, 3 ; padding
	bic	r2, r2, 0x3 ; align
	str	r2, [r5] ; here

	pop	r4-r5
	bx	lr

; ( data -- )
name_comma:
	dd	name_CREATE ; link
	db	1,',' ; name
	.align	4
comma:
	ldr	r1, [var_hereref]
	ldr	r0, [r1]
	stmia	[r0]!, r9
	str	r0, [r1]
	ldmfd	[r8]!, r9
	bx	lr

; ( addr -- )
name_HIDDEN:
	dd	name_rbrac
	db	6,'hidden' ; name
	.align	4
HIDDEN:
	ldrb	r0, [r9, 4]
	eor	r0, r0, word_hidden_flag
	strb	r0, [r9, 4]
	ldmfd	[r8]!, r9
	bx	lr

; ( -- )
name_BRANCH:
	dd	name_HIDDEN ; link
	db	6,'branch' ; name
	.align	4
BRANCH:
	ldr	r0, [lr] ; offset
	add	lr, lr, r0
	bx	lr

; ( cond -- )
name_0BRANCH:
	dd	name_BRANCH ; link
	db	7,'0branch' ; name
	.align	4
0BRANCH:
	cmp	r9, 0
	ldreq	r0, [lr] ; offset
	addeq	lr, lr, r0
	addne	lr, lr, 4
	ldmfd	[r8]!, r9
	bx	lr

; ( offset -- instruction )
name_qCALL:
	dd	name_0BRANCH ; link
	db	5, "'call" ; name
	.align	4
qCALL:
	sub	r9, r9, 4
	mov	r2, 0xEB000000
	mov	r9, r9, LSL#6
	orr	r9, r2, r9, LSR#8
	bx	lr


; assemble a call ("bl") instruction and write to HERE
; ( code -- )
name_CALLcomma:
	dd	name_qCALL ; link
	db	5,'call,' ; name
	.align	4
CALLcomma:
	push	r4-r5,lr
	ldr	r5, [var_hereref]
	ldr	r4, [r5] ; here
	sub	r9, r9, r4
	sub	r9, r9, 4
	bl	qCALL
	stmia	[r4]!, r9
	str	r4, [r5] ; here
	ldmfd	[r8]!, r9
	pop	r4-r5,lr
	bx	lr

; add a LIT instruction
; ( value -- )
name_LITcomma:
	dd	name_CALLcomma ; link
	db	4,'lit,' ; name
	.align	4
LITcomma:
	; TODO: optimize small literals
	push	lr
	bl	LIT
		dd	LIT
	bl	CALLcomma
	bl	COMMA ; add value
	pop	lr
	bx	lr

; TODO: make separate words to change hereref
name_lbrac:
	dd	name_comma ; link
	db	(1 or word_immediate_flag),'[' ; name
	.align	4
lbrac:
	ldr	r0, [var_scratch_start]
	ldr	r1, =docol
	stmia	[r0]!, r1
	ldr	r1, =var_scratch
	str	r0, [r1]
	str	r1, [var_hereref]
	bx	lr

name_rbrac:
	dd	name_lbrac ; link
	db	(1 or word_immediate_flag),']' ; name
	.align	4
rbrac:
	push	lr
	bl	LIT
		dd	EXIT
	bl	CALLcomma
	ldr	r0, =var_data
	str	r0, [var_hereref]
	ldr	r0, [var_scratch_start]
	pop	lr
	bx	r0

name_colon:
	dd	name_LITcomma ; link
	db	(1 or word_immediate_flag),':' ; name
	.align	4
colon:
	push	lr
	bl	rbrac
	bl	WORD
	bl	CREATE
	bl	LIT
		dd	docol
	bl	COMMA
	bl	LATEST
	bl	fetch
	bl	HIDDEN
	bl	EXIT

name_semicolon:
	dd	name_colon ; link
	db	(1 or word_immediate_flag),';' ; name
	.align	4
semicolon:
	push	lr
	bl	LIT
		dd	EXIT
	bl	CALLcomma
	bl	LATEST
	bl	fetch
	bl	HIDDEN
	bl	lbrac
	bl	EXIT

; ( ptr -- )
name_EXECUTE:
	dd	name_semicolon ; link
	db	7,'execute' ; name
	.align	4
EXECUTE:
	mov	r0, r9
	ldmfd	[r8]!, r9
	bx	r0

; ( ptr -- result )
name_C_CALL0:
	dd	name_EXECUTE ; link
	db	7,'c-call0' ; name
	.align	4
	b	C_CALL0

; ( arg1 ptr -- result )
name_C_CALL1:
	dd	name_C_CALL0 ; link
	db	7,'c-call1' ; name
	.align	4
	b	C_CALL1

; ( arg1 arg2 ptr -- result )
name_C_CALL2:
	dd	name_C_CALL1 ; link
	db	7,'c-call2' ; name
	.align	4
	b	C_CALL2

; ( arg1 arg2 arg3 ptr -- result )
name_C_CALL3:
	dd	name_C_CALL2 ; link
	db	7,'c-call3' ; name
	.align	4
	b	C_CALL3

; ( arg1 arg2 arg3 arg4 ptr -- result )
name_C_CALL4:
	dd	name_C_CALL3 ; link
	db	7,'c-call4' ; name
	.align	4
C_CALL4:
	ldmfd	[r8]!, r3
C_CALL3:
	ldmfd	[r8]!, r2
C_CALL2:
	ldmfd	[r8]!, r1
C_CALL1:
	ldmfd	[r8]!, r0
C_CALL0:
	push	lr
	blx	r9 ; fn pointer
	mov	r9, r0
	pop	lr
	bx	lr

; ( nn -- result )
name_BIOS0:
	dd	name_C_CALL4 ; link
	db	5,'bios0' ; name
	.align	4
	b	BIOS0

; ( arg1 nn -- result )
name_BIOS1:
	dd	name_BIOS0 ; link
	db	5,'bios1' ; name
	.align	4
	b	BIOS1

; ( arg1 arg2 nn -- result )
name_BIOS2:
	dd	name_BIOS1 ; link
	db	5,'bios2' ; name
	.align	4
	b	BIOS2

; ( arg1 arg2 arg3 nn -- result )
name_BIOS3:
	dd	name_BIOS2 ; link
	db	5,'bios3' ; name
	.align	4
	b	BIOS3

; ( arg1 arg2 arg3 arg4 nn -- result )
name_BIOS4:
	dd	name_BIOS3 ; link
	db	5,'bios4' ; name
	.align	4
BIOS4:
	ldmfd	[r8]!, r3
BIOS3:
	ldmfd	[r8]!, r2
BIOS2:
	ldmfd	[r8]!, r1
BIOS1:
	ldmfd	[r8]!, r0
BIOS0:
	; this is self-modifying code!
	strb	r9, [@@swi_instr + 2] ; comment (upper 8 bits)
	b	@@swi_instr ; flush prefetch buffer
	nop
@@swi_instr:
	swi	0 ; will be modified before execution
	mov	r9, r0
	bx	lr


; loop until input buffer empty
name_INTERPRET:
	dd	name_BIOS4 ; link
	db	9,'interpret' ; name
	.align	4
INTERPRET:
	push	lr

	bl	lbrac

@@interp_loop:
	bl	WORD
	bl	OVER ; word ptr
	bl	OVER ; word len
	bl	FIND
	cmp	r9, 0
	beq	@@not_in_dict

	bl	NIP ; word ptr
	bl	NIP ; word len
	ldrb	r0, [r9, 4]
	push	r0
	bl	toCFA
	pop	r0
	tst	r0, word_immediate_flag
	bne	@@execute

	; compile word
	bl	CALLcomma
	b	@@interp_end

@@execute:
	bl	EXECUTE
	b	@@interp_end

@@not_in_dict:
	bl	DROP ; found ptr (zero)

	bl	OVER ; word ptr
	bl	OVER ; word len
	bl	NUMBER
	cmp	r9, 0
	bne	@@not_number

	bl	DROP ; uncoverted chars (zero)
	bl	NIP ; word ptr
	bl	NIP ; word len

	; compile literal
	bl	LITcomma
	b	@@interp_end

@@not_number:
	bl	DROP
	bl	DROP

	bl	TYPE
	bl	LIT
		dd	'?'
	bl	EMIT
	b	QUIT ; abort

@@interp_end:
	bl	WORDquestion
	cmp	r9, 0
	bl	DROP
	bne	@@interp_loop ; still words available

	ldr	r0, [var_hereref]
	ldr	r1, =var_scratch
	cmp	r0, r1
	bne	@@interp_loop ; not in immediate mode

	bl	rbrac ; execute

	; check for errors
	ldr	r0, [var_data_stack_top]
	cmp	r8, r0
	bhi	@@data_underflow
	ldr	r0, [var_return_stack_top]
	sub	r0, 8 ; stack should be at least two words deep
	cmp	sp, r0
	bhi	@@return_underflow

	bl	EXIT

@@data_underflow:
	bl	f_print_string_inline
		db	10,'!! Data Underflow !!',0
		.align	4
	b	QUIT ; abort
@@return_underflow:
	bl	f_print_string_inline
		db	10,'!! Return Underflow !!',0
		.align	4
	b	QUIT ; abort

name_QUIT:
	dd	name_INTERPRET ; link
	db	4,'quit' ; name
	.align	4
QUIT:
	ldr	r0, [var_buftop]
	str	r0, [var_curkey] ; clear input buffer
	ldr	sp, [var_return_stack_top] ; Reset return stack
	bl	f_init_forth_env

@@interp_loop:
	mov	r0, 10 ; newline
	bl	f_print_char
	bl	INTERPRET

	ldr	r0, [var_return_stack_top]
	sub	r0, 4 ; stack should be one word deep
	cmp	sp, r0
	blo	@@return_not_empty

	bl	f_print_string_inline
		db	' ok',0
		.align	4
	b	@@interp_loop

@@return_not_empty:
	bl	f_print_string_inline
		db	10,'!! Return Not Empty !!',0
		.align	4
	b	QUIT ; abort

name_comment:
	dd	name_QUIT ; link
	db	(1 or word_immediate_flag),'(' ; name
	.align	4
comment:
	push	r4,lr
	mov	r4, 1 ; depth
@@loop:
	bl	f_key
	cmp	r0, '('
	addeq	r4, r4, 1
	cmp	r0, ')'
	subeq	r4, r4, 1
	cmp	r4, 0
	bne	@@loop
	pop	r4,lr
	bx	lr

name_DLDI:
	dd	name_comment ; link
	db	4,'dldi' ; name
	.align	4
DLDI:
	stmfd	[r8]!, r9
	add	r9, =dldi_start
	bx	lr

latest_word = name_DLDI
.pool
