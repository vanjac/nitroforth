dtcm_loc = 0x00800000

arm9_entry:
	.msg	'>> ENTER ARM9'

	; Normalized initialization (fix discrepancies in emulator)
	ldr	r0, =0x027FFE24
	add	r1, =arm9_entry2
	str	r1, [r0]
	swi	0x00000 ; SoftReset
arm9_entry2:
	ldr	r0, =(dtcm_loc OR 0xA)
	mov	p15,0,c9,c1,0, r0 ; DTCM
	; End normalized initialization

	ldr	r0, =0x027FFD9C ; Debug Vector
	add	r1, =arm9_debug_handle
	str	r1, [r0]

	mov	r0, p15,0,c1,c0,0 ; CP15 Control Register
	orr	r0, 0x1           ; Enable Protection Unit
	mov	p15,0,c1,c0,0, r0

	; Disable PU region 2
	; TODO: set other PU regions
	mov	r0, 0 ; disabled
	mov	p15,0,c6,c2,0, r0

	; TODO: enable data / instruction cache

	mov	r10, 0x04000000 ; I/O start (constant!)

	ldr	r0, =0x54DF480B ; palette colors
	ldr	r1, =0x05000400 ; palette address
	str	r0, [r1]
	ldr	r0, =0x0EFF0000
	str	r0, [r1, 0x200]

	ldr	r11, =0x04001000 ; DISPCNT B
	ldr	r1, =0x00011100 ; set Engine B to mode 1 (graphics display). enable BG0+OBJ
	str	r1, [r11]
	mov	r1, 0x0400
	strh	r1, [r11, 8] ; BG0CNT

	mov	r1, 0x84 ; map VRAM C as Engine B BG-VRAM
	strb	r1, [r10, 0x242]
	mov	r1, 0x84 ; map VRAM D as Engine B OBJ-VRAM
	strb	r1, [r10, 0x243]

	bl	f_init_term_out
	bl	f_render_keyboard

	bl	f_print_string_inline
		db	'hello :3',10,0
		.align	4

	ldr	r0, =(dtcm_loc + 0x3FFC) ; IRQ vector
	add	r1, =arm9_intr_handle
	str	r1, [r0]

	mov	r0, 0x8400 ; enable IPC Recv IRQ
	str	r0, [r10, 0x184] ; IPCFIFOCNT

	mov	r1, 0x40000 ; enable IPC Recv interrupt
	str	r1, [r10, 0x210] ; IE

	mvn	r1, 0
	str	r1, [r10, 0x214] ; IF
	mov	r1, 1
	str	r1, [r10, 0x208] ; IME

	; cpu interrupt enable (clear I-flag)
	mov  r0, cpsr
	bic  r0, r0, 0x80
	mov  cpsr, r0

	b	start_forth

; r0-r3 are pushed by BIOS
arm9_intr_handle:
	; acknowledge interrupt
	ldr	r1, [r10, 0x214] ; IF
	str	r1, [r10, 0x214] ; IF

	bx	lr

; r0: numerator
; r1: denominator
; ---
; r0: quotient
f_arm9_divide_32:
	mov	r2, 0 ; mode 0 (32-bit)
	str	r2, [r10, 0x280]
	str	r0, [r10, 0x290]
	str	r1, [r10, 0x298]
@@busy_loop:
	ldr	r2, [r10, 0x280]
	tst	r2, 0x8000
	bne	@@busy_loop

	ldr	r0, [r10, 0x2A0]
	bx	lr

; r0: ADC X/Y values
; ---
; r0: X coord
; r1: Y coord
f_calc_touchscreen_pos:
	push	r4-r9,lr

	mov	r4, r0, LSL#16
	mov	r4, r4, LSR#16 ; adc.y
	mov	r0, r0, LSR#16 ; adc.x
	ldr	r8, =0x027FFCD8 ; touch screen calibration data addr
	; calc X coord
	ldrh	r5, [r8, 0x0] ; adc.x1
	ldrb	r6, [r8, 0x4] ; scr.x1
	ldrh	r1, [r8, 0x6] ; adc.x2
	ldrb	r7, [r8, 0xA] ; scr.x2
	sub	r0, r0, r5 ; (adc.x - adc.x1)
	sub	r7, r7, r6 ; (scr.x2 - scr.x1)
	mul	r0, r0, r7 ; (adc.x - adc.x1) * (scr.x2 - scr.x1)
	sub	r1, r1, r5 ; (adc.x2 - adc.x1)
	bl	f_arm9_divide_32
	add	r9, r0, r6
	sub	r9, r9, 1  ; scr.x

	; calc Y coord
	ldrh	r5, [r8, 0x2] ; adc.y1
	ldrb	r6, [r8, 0x5] ; scr.y1
	ldrh	r1, [r8, 0x8] ; adc.y2
	ldrb	r7, [r8, 0xB] ; scr.y2
	sub	r0, r4, r5 ; (adc.y - adc.y1)
	sub	r7, r7, r6 ; (scr.y2 - scr.y1)
	mul	r0, r0, r7 ; (adc.y - adc.y1) * (scr.y2 - scr.y1)
	sub	r1, r1, r5 ; (adc.y2 - adc.y1)
	bl	f_arm9_divide_32
	add	r1, r0, r6
	sub	r1, r1, 1 ; scr.y

	mov	r0, r9

	pop	r4-r9,lr
	bx	lr

arm9_debug_handle:
	mov	r10, 0x04000000

	; Disable interrupts
	mov	r1, 0
	str	r1, [r10, 0x210] ; IE
	str	r1, [r10, 0x208] ; IME

	bl	f_print_string_inline
		db	10,'CRASH! at ',0
		.align	4

	ldr	r0, =0x027FFD98
	ldr	r0, [r0]
	bl	f_print_u32_hex

	swi	0x60000 ; halt

.pool
