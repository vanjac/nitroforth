	.align 0x40
dldi_start:
	db	0xED,0xA5,0x8D,0xBF ; ID
	db	" Chishm",0
	db	0,0,0,0x0F ; DLDI size: 32 kb
	db	'(none)',0
	defs	(dldi_start + 0x40 - $)
	dd	dldi_start ; ALL start
	defs	(dldi_start + 0x68 - $)
dldi_startup_addr:
	dd	dldi_fail
dldi_inserted_addr:
	dd	dldi_fail
dldi_read_addr:
	dd	dldi_read
dldi_write_addr:
	dd	dldi_fail
dldi_reset_addr:
	dd	dldi_fail
dldi_shutdown_addr:
	dd	dldi_fail

dldi_fail:
	mov	r0, 0
	bx	lr

; TODO: This doesn't work on real hardware! Only for testing on No$
; r0: Sector start
; r1: Sector count
; r2: Buffer
dldi_read:
	push	r4

	; Setup Gamecard Bus
	add	r3, r10, 0x1A0 ; AUXSPICNT
	ldr	r4, =0xC000 ; enable Transfer Ready IRQ
	strh	r4, [r3]

	ldr	r3, =vdisk_offset
	add	r0, r3, r0, LSL#9 ; multiply by sector size
	mov	r1, r1, LSL#9 ; multiply by sector size

	; Read command (convert little endian to big endian)
	mov	r4, 0xB7 ; Command byte
	mov	r3, r3, LSR#24
	orr	r4, r4, r3, LSL#8 ; address (MSB)
	mov	r3, r0, LSL#8
	mov	r3, r3, LSR#24
	orr	r4, r4, r3, LSL#16
	mov	r3, r0, LSL#16
	mov	r3, r3, LSR#24
	orr	r4, r4, r3, LSL#24
	str	r4, [r10, 0x1A8]
	mov	r4, 0
	str	r4, [r10, 0x1AC]

	ldr	r4, [r10, 0x1A4] ; ROMCTRL
	orr	r4, 0x80000000 ; Start
	str	r4, [r10, 0x1A4] ; ROMCTRL

	ldr	r3, =0x4100010
@@read_loop:
	ldr	r4, [r3]
	stmia	[r2]!, r4
	subs	r1, r1, 4
	bge	@@read_loop

	mov	r0, 1 ; success
	pop	r4
	bx	lr

.pool

	defs	(dldi_start + 0x8000 - $)
dldi_end:
